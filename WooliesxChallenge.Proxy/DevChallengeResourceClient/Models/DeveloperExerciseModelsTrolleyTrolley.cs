// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WooliesxChallenge.Proxy.Resource.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DeveloperExerciseModelsTrolleyTrolley
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DeveloperExerciseModelsTrolleyTrolley class.
        /// </summary>
        public DeveloperExerciseModelsTrolleyTrolley()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// DeveloperExerciseModelsTrolleyTrolley class.
        /// </summary>
        public DeveloperExerciseModelsTrolleyTrolley(IList<DeveloperExerciseModelsTrolleyProduct> products, IList<DeveloperExerciseModelsTrolleySpecial> specials, IList<DeveloperExerciseModelsTrolleyProductQuantity> quantities)
        {
            Products = products;
            Specials = specials;
            Quantities = quantities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "products")]
        public IList<DeveloperExerciseModelsTrolleyProduct> Products { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "specials")]
        public IList<DeveloperExerciseModelsTrolleySpecial> Specials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantities")]
        public IList<DeveloperExerciseModelsTrolleyProductQuantity> Quantities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Products == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Products");
            }
            if (Specials == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Specials");
            }
            if (Quantities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Quantities");
            }
        }
    }
}

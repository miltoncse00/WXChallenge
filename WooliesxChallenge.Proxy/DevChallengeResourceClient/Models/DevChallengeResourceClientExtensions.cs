// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WooliesxChallenge.Proxy.Resource
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DevChallengeResourceClient.
    /// </summary>
    public static partial class DevChallengeResourceClientExtensions
    {
            /// <summary>
            /// Exercise 1 - Basic response (token and name).
            /// </summary>
            /// <remarks>
            /// This will call your api looking for a resource available at your base url
            /// /user.
            ///
            /// For example, if the url you request is "http://localhost:5001/api/answers"
            /// this will make a GET request to "http://localhost:5001/api/answers/user"
            ///
            /// The result will be a JSON object in the format {"name": "test", "token" :
            /// "1234-455662-22233333-3333"}
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static IList<DeveloperExerciseServicesExerciseResult> ApiExerciseExercise1Post(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest))
            {
                return operations.ApiExerciseExercise1PostAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exercise 1 - Basic response (token and name).
            /// </summary>
            /// <remarks>
            /// This will call your api looking for a resource available at your base url
            /// /user.
            ///
            /// For example, if the url you request is "http://localhost:5001/api/answers"
            /// this will make a GET request to "http://localhost:5001/api/answers/user"
            ///
            /// The result will be a JSON object in the format {"name": "test", "token" :
            /// "1234-455662-22233333-3333"}
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeveloperExerciseServicesExerciseResult>> ApiExerciseExercise1PostAsync(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiExerciseExercise1PostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exercise 2 - This will test your sorting endpoint.
            /// </summary>
            /// <remarks>
            /// This will call your api looking for a range of different sorting options at
            /// your base url /sort
            ///
            /// Your Api needs to call the "products" resource to get a list of available
            /// products
            ///
            /// This endpoint will need to accept a query string parameter called
            /// "sortOption" which will take in the following strings
            ///
            /// - "Low" - Low to High Price
            /// - "High" - High to Low Price
            /// - "Ascending" - A - Z sort on the Name
            /// - "Descending" - Z - A sort on the Name
            /// - "Recommended" - this will call the "shopperHistory" resource to get a
            /// list of customers orders and needs to return based on popularity,
            ///
            /// Your response will be in the same data structure as the "products" response
            /// (only sorted correctly)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static IList<DeveloperExerciseServicesExerciseResult> ApiExerciseExercise2Post(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest))
            {
                return operations.ApiExerciseExercise2PostAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exercise 2 - This will test your sorting endpoint.
            /// </summary>
            /// <remarks>
            /// This will call your api looking for a range of different sorting options at
            /// your base url /sort
            ///
            /// Your Api needs to call the "products" resource to get a list of available
            /// products
            ///
            /// This endpoint will need to accept a query string parameter called
            /// "sortOption" which will take in the following strings
            ///
            /// - "Low" - Low to High Price
            /// - "High" - High to Low Price
            /// - "Ascending" - A - Z sort on the Name
            /// - "Descending" - Z - A sort on the Name
            /// - "Recommended" - this will call the "shopperHistory" resource to get a
            /// list of customers orders and needs to return based on popularity,
            ///
            /// Your response will be in the same data structure as the "products" response
            /// (only sorted correctly)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeveloperExerciseServicesExerciseResult>> ApiExerciseExercise2PostAsync(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiExerciseExercise2PostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exercise 3 - Given products specials and quantities, return the trolleys
            /// total.
            /// </summary>
            /// <remarks>
            /// &lt;br /&gt;This will call your api looking for a resource available at
            /// your base url /trolleyTotal which should return the lowest possible total
            /// based on provided lists of prices, specials and quantities.
            /// &lt;br /&gt;&lt;br /&gt; Example of the post request can be found in the
            /// /Resources Api below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static IList<DeveloperExerciseServicesExerciseResult> ApiExerciseExercise3Post(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest))
            {
                return operations.ApiExerciseExercise3PostAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exercise 3 - Given products specials and quantities, return the trolleys
            /// total.
            /// </summary>
            /// <remarks>
            /// &lt;br /&gt;This will call your api looking for a resource available at
            /// your base url /trolleyTotal which should return the lowest possible total
            /// based on provided lists of prices, specials and quantities.
            /// &lt;br /&gt;&lt;br /&gt; Example of the post request can be found in the
            /// /Resources Api below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeveloperExerciseServicesExerciseResult>> ApiExerciseExercise3PostAsync(this IDevChallengeResourceClient operations, DeveloperExerciseApiModelsTrolleyExerciseRequest request = default(DeveloperExerciseApiModelsTrolleyExerciseRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiExerciseExercise3PostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This will return all customers buying habits for a range of products
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a resource for exercise 2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            public static IList<DeveloperExerciseModelsSortShopperOrders> ApiResourceShopperHistoryGet(this IDevChallengeResourceClient operations, System.Guid token)
            {
                return operations.ApiResourceShopperHistoryGetAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This will return all customers buying habits for a range of products
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a resource for exercise 2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeveloperExerciseModelsSortShopperOrders>> ApiResourceShopperHistoryGetAsync(this IDevChallengeResourceClient operations, System.Guid token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiResourceShopperHistoryGetWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This will return all customers buying habits for a range of products
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a resource for exercise 2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            public static IList<DeveloperExerciseModelsSortProduct> ApiResourceProductsGet(this IDevChallengeResourceClient operations, System.Guid token)
            {
                return operations.ApiResourceProductsGetAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This will return all customers buying habits for a range of products
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a resource for exercise 2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeveloperExerciseModelsSortProduct>> ApiResourceProductsGetAsync(this IDevChallengeResourceClient operations, System.Guid token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiResourceProductsGetWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This will return the lowest total given products, specials and quantities.
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a (optional) resource for exercise 3
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static int? ApiResourceTrolleyCalculatorPost(this IDevChallengeResourceClient operations, System.Guid token, DeveloperExerciseModelsTrolleyTrolley request = default(DeveloperExerciseModelsTrolleyTrolley))
            {
                return operations.ApiResourceTrolleyCalculatorPostAsync(token, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This will return the lowest total given products, specials and quantities.
            /// </summary>
            /// <remarks>
            /// This is not a test - it is a (optional) resource for exercise 3
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> ApiResourceTrolleyCalculatorPostAsync(this IDevChallengeResourceClient operations, System.Guid token, DeveloperExerciseModelsTrolleyTrolley request = default(DeveloperExerciseModelsTrolleyTrolley), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiResourceTrolleyCalculatorPostWithHttpMessagesAsync(token, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
